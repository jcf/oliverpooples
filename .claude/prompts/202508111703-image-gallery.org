#+title:    Image gallery
#+author:   James Conroy-Finn <james@invetica.co.uk>
#+date:     2025-08-11
#+property: header-args :dir ../../

I have emailed photos of poorly manufactured glasses to Oliver People's. After
four days of hearing nothing from their customer support team, I sent a follow
up email and called.

A customer service representative told me that they couldn't see the images I
sent and that all they could see was text. They suggested I instead try emailing
them images in PDF or PNG format.

They included JPEG in their list of supported formats. I have verified the email
has three images attached in both Apple Mail and Fastmail. The problem looks to
be at their end.

To maximise the likelihood of them seeing the thick white borders visible inside
of these designer frames brought about by the thick white edges on the "premium"
lenses provided by Barberini, as well as emailing once again, I'm uploading to a
public Vercel website.

This website needs to show the images listed in =src/assets/images=. We should
use Astro's built-in responsive image components.

#+begin_src sh
ls -1 src/assets/images
#+end_src

#+results:
| IMG_4732.jpeg |
| IMG_4733.jpeg |
| IMG_4734.jpeg |

I need to hook up Plausible using my standard proxying approach to maximise
likelihood of seeing activity while respecting privacy via use of a anonymised
platform hosted in Europe.

* =<Plausible>= component
#+begin_src astro
---

---

<script
  is:inline
  defer
  data-domain="oliverpooples.vercel.app"
  data-api="/api/event"
  src="/js/script.js"></script>

<script is:inline>
  window.plausible =
    window.plausible ||
    function () {
      (window.plausible.q = window.plausible.q || []).push(arguments);
    };
</script>
#+end_src

* =vercel.json=
#+begin_src json
{
  "framework": "astro",
  "headers": [
    {
      "source": "/(.*)",
      "headers": [
        {
          "key": "Content-Security-Policy",
          "value": "base-uri 'none'; child-src 'self'; connect-src 'self'; default-src 'none'; font-src 'self' data:; img-src 'self' https://img.shields.io; manifest-src 'self'; object-src 'none'; frame-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline';"
        },
        {
          "key": "Permissions-Policy",
          "value": "camera=(), microphone=(), geolocation=(), interest-cohort=()"
        },
        {
          "key": "Referrer-Policy",
          "value": "no-referrer-when-downgrade"
        },
        {
          "key": "X-DNS-Prefetch-Control",
          "value": "on"
        },
        {
          "key": "X-Content-Type-Options",
          "value": "nosniff"
        },
        {
          "key": "X-Frame-Options",
          "value": "DENY"
        },
        {
          "key": "X-XSS-Protection",
          "value": "1; mode=block"
        }
      ]
    }
  ],
  "rewrites": [
    {
      "source": "/api/event",
      "destination": "https://plausible.io/api/event"
    },
    {
      "source": "/js/script.js",
      "destination": "https://plausible.io/js/script.js"
    }
  ],
  "trailingSlash": false
}
#+end_src

* =index.astro=
Then we can conditionally inject Plausible like so:

#+begin_src astro
{import.meta.env.PROD === true && <Plausible />}
#+end_src

* Tailwind
We have Tailwind in place and I have a paid Tailwind Plus license we can use for
inspiration. I'm thinking the e-commerce layouts to inject a little humour.

#+begin_src html
<div class="bg-white">
  <div class="mx-auto max-w-2xl px-4 py-16 sm:px-6 sm:py-24 lg:max-w-7xl lg:px-8">
    <div class="md:flex md:items-center md:justify-between">
      <h2 class="text-2xl font-bold tracking-tight text-gray-900">Trending products</h2>
      <a href="#" class="hidden text-sm font-medium text-indigo-600 hover:text-indigo-500 md:block">
        Shop the collection
        <span aria-hidden="true"> &rarr;</span>
      </a>
    </div>

    <div class="mt-6 grid grid-cols-2 gap-x-4 gap-y-10 sm:gap-x-6 md:grid-cols-4 md:gap-y-0 lg:gap-x-8">
      <div class="group relative">
        <div class="h-56 w-full overflow-hidden rounded-md bg-gray-200 group-hover:opacity-75 lg:h-72 xl:h-80">
          <img src="https://tailwindcss.com/plus-assets/img/ecommerce-images/home-page-04-trending-product-02.jpg" alt="Hand stitched, orange leather long wallet." class="size-full object-cover" />
        </div>
        <h3 class="mt-4 text-sm text-gray-700">
          <a href="#">
            <span class="absolute inset-0"></span>
            Leather Long Wallet
          </a>
        </h3>
        <p class="mt-1 text-sm text-gray-500">Natural</p>
        <p class="mt-1 text-sm font-medium text-gray-900">$75</p>
      </div>
      <div class="group relative">
        <div class="h-56 w-full overflow-hidden rounded-md bg-gray-200 group-hover:opacity-75 lg:h-72 xl:h-80">
          <img src="https://tailwindcss.com/plus-assets/img/ecommerce-images/home-page-04-trending-product-03.jpg" alt="12-sided, machined black pencil and pen." class="size-full object-cover" />
        </div>
        <h3 class="mt-4 text-sm text-gray-700">
          <a href="#">
            <span class="absolute inset-0"></span>
            Machined Pencil and Pen Set
          </a>
        </h3>
        <p class="mt-1 text-sm text-gray-500">Black</p>
        <p class="mt-1 text-sm font-medium text-gray-900">$70</p>
      </div>
      <div class="group relative">
        <div class="h-56 w-full overflow-hidden rounded-md bg-gray-200 group-hover:opacity-75 lg:h-72 xl:h-80">
          <img src="https://tailwindcss.com/plus-assets/img/ecommerce-images/home-page-04-trending-product-04.jpg" alt="Set of three light and dark brown mini sketch books." class="size-full object-cover" />
        </div>
        <h3 class="mt-4 text-sm text-gray-700">
          <a href="#">
            <span class="absolute inset-0"></span>
            Mini-Sketchbooks
          </a>
        </h3>
        <p class="mt-1 text-sm text-gray-500">Light Brown</p>
        <p class="mt-1 text-sm font-medium text-gray-900">$27</p>
      </div>
      <div class="group relative">
        <div class="h-56 w-full overflow-hidden rounded-md bg-gray-200 group-hover:opacity-75 lg:h-72 xl:h-80">
          <img src="https://tailwindcss.com/plus-assets/img/ecommerce-images/home-page-04-trending-product-01.jpg" alt="Beautiful walnut organizer set with multiple white compartments" class="size-full object-cover" />
        </div>
        <h3 class="mt-4 text-sm text-gray-700">
          <a href="#">
            <span class="absolute inset-0"></span>
            Organizer Set
          </a>
        </h3>
        <p class="mt-1 text-sm text-gray-500">Walnut</p>
        <p class="mt-1 text-sm font-medium text-gray-900">$149</p>
      </div>
    </div>

    <div class="mt-8 text-sm md:hidden">
      <a href="#" class="font-medium text-indigo-600 hover:text-indigo-500">
        Shop the collection
        <span aria-hidden="true"> &rarr;</span>
      </a>
    </div>
  </div>
</div>
#+end_src

When clicking/tapping on an image, I like the idea of using a product popover to
really sell the e-com aesthetic.

#+begin_src html
<el-dialog>
  <dialog id="modal" class="relative z-10 backdrop:bg-transparent">
    <el-dialog-backdrop class="fixed inset-0 hidden bg-gray-500/75 transition-opacity data-closed:opacity-0 data-enter:duration-300 data-enter:ease-out data-leave:duration-200 data-leave:ease-in md:block"></el-dialog-backdrop>

    <div tabindex="0" class="fixed inset-0 z-10 w-screen overflow-y-auto focus:outline-none">
      <div class="flex min-h-full items-stretch justify-center text-center md:items-center md:px-2 lg:px-4">
        <!-- Modal panel, show/hide based on modal state. -->
        <el-dialog-panel class="flex w-full transform text-left text-base transition data-closed:translate-y-4 data-closed:opacity-0 data-enter:duration-300 data-enter:ease-out data-leave:duration-200 data-leave:ease-in md:my-8 md:max-w-2xl md:px-4 data-closed:md:translate-y-0 data-closed:md:scale-95 lg:max-w-4xl">
          <div class="relative flex w-full items-center overflow-hidden bg-white px-4 pt-14 pb-8 shadow-2xl sm:px-6 sm:pt-8 md:p-6 lg:p-8">
            <button type="button" command="close" commandfor="modal" class="absolute top-4 right-4 text-gray-400 hover:text-gray-500 sm:top-8 sm:right-6 md:top-6 md:right-6 lg:top-8 lg:right-8">
              <span class="sr-only">Close</span>
              <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" data-slot="icon" aria-hidden="true" class="size-6">
                <path d="M6 18 18 6M6 6l12 12" stroke-linecap="round" stroke-linejoin="round" />
              </svg>
            </button>

            <div class="grid w-full grid-cols-1 items-start gap-x-6 gap-y-8 sm:grid-cols-12 lg:gap-x-8">
              <div class="sm:col-span-4 lg:col-span-5">
                <img src="https://tailwindcss.com/plus-assets/img/ecommerce-images/product-page-03-product-04.jpg" alt="Back angled view with bag open and handles to the side." class="aspect-square w-full rounded-lg bg-gray-100 object-cover" />
              </div>
              <div class="sm:col-span-8 lg:col-span-7">
                <h2 class="text-2xl font-bold text-gray-900 sm:pr-12">Zip Tote Basket</h2>

                <section aria-labelledby="information-heading" class="mt-3">
                  <h3 id="information-heading" class="sr-only">Product information</h3>

                  <p class="text-2xl text-gray-900">$220</p>

                  <!-- Reviews -->
                  <div class="mt-3">
                    <h4 class="sr-only">Reviews</h4>
                    <div class="flex items-center">
                      <div class="flex items-center">
                        <!-- Active: "text-gray-400", Inactive: "text-gray-200" -->
                        <svg viewBox="0 0 20 20" fill="currentColor" data-slot="icon" aria-hidden="true" class="size-5 shrink-0 text-gray-400">
                          <path d="M10.868 2.884c-.321-.772-1.415-.772-1.736 0l-1.83 4.401-4.753.381c-.833.067-1.171 1.107-.536 1.651l3.62 3.102-1.106 4.637c-.194.813.691 1.456 1.405 1.02L10 15.591l4.069 2.485c.713.436 1.598-.207 1.404-1.02l-1.106-4.637 3.62-3.102c.635-.544.297-1.584-.536-1.65l-4.752-.382-1.831-4.401Z" clip-rule="evenodd" fill-rule="evenodd" />
                        </svg>
                        <svg viewBox="0 0 20 20" fill="currentColor" data-slot="icon" aria-hidden="true" class="size-5 shrink-0 text-gray-400">
                          <path d="M10.868 2.884c-.321-.772-1.415-.772-1.736 0l-1.83 4.401-4.753.381c-.833.067-1.171 1.107-.536 1.651l3.62 3.102-1.106 4.637c-.194.813.691 1.456 1.405 1.02L10 15.591l4.069 2.485c.713.436 1.598-.207 1.404-1.02l-1.106-4.637 3.62-3.102c.635-.544.297-1.584-.536-1.65l-4.752-.382-1.831-4.401Z" clip-rule="evenodd" fill-rule="evenodd" />
                        </svg>
                        <svg viewBox="0 0 20 20" fill="currentColor" data-slot="icon" aria-hidden="true" class="size-5 shrink-0 text-gray-400">
                          <path d="M10.868 2.884c-.321-.772-1.415-.772-1.736 0l-1.83 4.401-4.753.381c-.833.067-1.171 1.107-.536 1.651l3.62 3.102-1.106 4.637c-.194.813.691 1.456 1.405 1.02L10 15.591l4.069 2.485c.713.436 1.598-.207 1.404-1.02l-1.106-4.637 3.62-3.102c.635-.544.297-1.584-.536-1.65l-4.752-.382-1.831-4.401Z" clip-rule="evenodd" fill-rule="evenodd" />
                        </svg>
                        <svg viewBox="0 0 20 20" fill="currentColor" data-slot="icon" aria-hidden="true" class="size-5 shrink-0 text-gray-400">
                          <path d="M10.868 2.884c-.321-.772-1.415-.772-1.736 0l-1.83 4.401-4.753.381c-.833.067-1.171 1.107-.536 1.651l3.62 3.102-1.106 4.637c-.194.813.691 1.456 1.405 1.02L10 15.591l4.069 2.485c.713.436 1.598-.207 1.404-1.02l-1.106-4.637 3.62-3.102c.635-.544.297-1.584-.536-1.65l-4.752-.382-1.831-4.401Z" clip-rule="evenodd" fill-rule="evenodd" />
                        </svg>
                        <svg viewBox="0 0 20 20" fill="currentColor" data-slot="icon" aria-hidden="true" class="size-5 shrink-0 text-gray-200">
                          <path d="M10.868 2.884c-.321-.772-1.415-.772-1.736 0l-1.83 4.401-4.753.381c-.833.067-1.171 1.107-.536 1.651l3.62 3.102-1.106 4.637c-.194.813.691 1.456 1.405 1.02L10 15.591l4.069 2.485c.713.436 1.598-.207 1.404-1.02l-1.106-4.637 3.62-3.102c.635-.544.297-1.584-.536-1.65l-4.752-.382-1.831-4.401Z" clip-rule="evenodd" fill-rule="evenodd" />
                        </svg>
                      </div>
                      <p class="sr-only">3.9 out of 5 stars</p>
                    </div>
                  </div>

                  <div class="mt-6">
                    <h4 class="sr-only">Description</h4>

                    <p class="text-sm text-gray-700">The Zip Tote Basket is the perfect midpoint between shopping tote and comfy backpack. With convertible straps, you can hand carry, should sling, or backpack this convenient and spacious bag. The zip top and durable canvas construction keeps your goods protected for all-day use.</p>
                  </div>
                </section>

                <section aria-labelledby="options-heading" class="mt-6">
                  <h3 id="options-heading" class="sr-only">Product options</h3>

                  <form>
                    <!-- Colors -->
                    <div>
                      <h4 class="text-sm font-medium text-gray-600">Color</h4>

                      <fieldset aria-label="Choose a color" class="mt-2">
                        <div class="flex items-center gap-x-3">
                          <div class="flex rounded-full outline -outline-offset-1 outline-black/10">
                            <input type="radio" name="color" value="washed-black" checked aria-label="Washed Black" class="size-8 appearance-none rounded-full bg-gray-700 forced-color-adjust-none checked:outline-2 checked:outline-offset-2 checked:outline-gray-700 focus-visible:outline-3 focus-visible:outline-offset-3" />
                          </div>
                          <div class="flex rounded-full outline -outline-offset-1 outline-black/10">
                            <input type="radio" name="color" value="white" aria-label="White" class="size-8 appearance-none rounded-full bg-white forced-color-adjust-none checked:outline-2 checked:outline-offset-2 checked:outline-gray-400 focus-visible:outline-3 focus-visible:outline-offset-3" />
                          </div>
                          <div class="flex rounded-full outline -outline-offset-1 outline-black/10">
                            <input type="radio" name="color" value="washed-gray" aria-label="Washed Gray" class="size-8 appearance-none rounded-full bg-gray-500 forced-color-adjust-none checked:outline-2 checked:outline-offset-2 checked:outline-gray-500 focus-visible:outline-3 focus-visible:outline-offset-3" />
                          </div>
                        </div>
                      </fieldset>
                    </div>

                    <div class="mt-6">
                      <button type="submit" class="flex w-full items-center justify-center rounded-md border border-transparent bg-indigo-600 px-8 py-3 text-base font-medium text-white hover:bg-indigo-700 focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 focus:ring-offset-gray-50 focus:outline-hidden">Add to bag</button>
                    </div>

                    <p class="absolute top-4 left-4 text-center sm:static sm:mt-6">
                      <a href="#" class="font-medium text-indigo-600 hover:text-indigo-500">View full details</a>
                    </p>
                  </form>
                </section>
              </div>
            </div>
          </div>
        </el-dialog-panel>
      </div>
    </div>
  </dialog>
</el-dialog>
#+end_src

We have Tailwind Elements available. See below for Tailwind Elements docs:

#+begin_src markdown
# Tailwind Plus Elements Documentation

Tailwind Plus Elements is a JavaScript UI component library that powers all the interactive behavior in our HTML snippets. It has no dependencies on JavaScript frameworks like React, and works with any modern stack—Next.js, Rails, Laravel, Svelte, Astro, or even plain HTML.

## Available components

Tailwind Plus Elements includes the following UI components:

- [Autocomplete](#autocomplete)
- [Command palette](#command-palette)
- [Dialog](#dialog)
- [Disclosure](#disclosure)
- [Dropdown menu](#dropdown-menu)
- [Popover](#popover)
- [Select](#select)
- [Tabs](#tabs)

## Browser support

Elements targets the same modern browsers supported by Tailwind CSS v4.0, and relies on the following minimum versions:

- **Chrome 111** _(released March 2023)_
- **Safari 16.4** _(released March 2023)_
- **Firefox 128** _(released July 2024)_

## Installing in your project

The easiest way to install Elements is via the CDN. To do this, add the following script to your project's `<head>` tag:

```html
<script src="https://cdn.jsdelivr.net/npm/@tailwindplus/elements@1" type="module"></script>
```

Alternatively, if you have a build pipeline you can also install it via npm:

```bash
npm install @tailwindplus/elements
```

Next, import Elements into your root layout:

```js
import '@tailwindplus/elements'
```

## Detecting when ready

Sometimes you may want to add additional functionality to the Elements' components using JavaScript. To do this you must ensure that Elements has been loaded and is ready before interacting with it. You can do this by listening to the `elements:ready` event on the `window` object:

```js
function myFunction() {
  let autocomplete = document.getElementById('autocomplete')
  // Do something with the autocomplete element
}

if (customElements.get('el-autocomplete')) {
  myFunction()
} else {
  window.addEventListener('elements:ready', myFunction)
}
```

## Autocomplete

The `<el-autocomplete>` component is a text input that allows users to enter arbitrary values or select from a list of filtered suggestions. It behaves like a native`<datalist>`, but offers greater control over styling.

### Component API

#### `<el-autocomplete>`

The main autocomplete component that manages form integration, filtering, and coordinates with its child components

| Type                      | Name           | Description                               |
| ------------------------- | -------------- | ----------------------------------------- |
| CSS variables (Read-only) | --input-width  | Provides the width of the input element.  |
| CSS variables (Read-only) | --button-width | Provides the width of the button element. |

#### `<el-options>`

The options container that handles the popover behavior.

| Type                        | Name            | Description                                                                                |
| --------------------------- | --------------- | ------------------------------------------------------------------------------------------ |
| Attributes                  | popover         | Required to enable the popover behavior.                                                   |
| Attributes                  | anchor          | Configures the way the options are anchored to the button.                                 |
| Attributes                  | anchor-strategy | Sets the `position` CSS property of the popover to either `absolute` (default) or `fixed`. |
| CSS variables               | --anchor-gap    | Sets the gap between the anchor and the popover.                                           |
| CSS variables               | --anchor-offset | Sets the distance that the popover should be nudged from its original position.            |
| Data attributes (Read-only) | data-closed     | Present before transitioning in, and when transitioning out.                               |
| Data attributes (Read-only) | data-enter      | Present when transitioning in.                                                             |
| Data attributes (Read-only) | data-leave      | Present when transitioning out.                                                            |
| Data attributes (Read-only) | data-transition | Present when transitioning in or out.                                                      |
| Methods                     | togglePopover() | Toggles the options visibility.                                                            |
| Methods                     | showPopover()   | Shows the options.                                                                         |
| Methods                     | hidePopover()   | Hides the options.                                                                         |

#### `<el-option>`

Individual selectable option within the autocomplete.

| Type                        | Name          | Description                                       |
| --------------------------- | ------------- | ------------------------------------------------- |
| Attributes                  | value         | The value of the option (required for selection). |
| Attributes                  | disabled      | Whether the option is disabled.                   |
| ARIA attributes (Read-only) | aria-selected | Present when the option is selected.              |

#### `<el-selectedcontent>`

Automatically displays the content of the currently selected option.

### Examples

#### Basic example

Use the `<el-autocomplete>` and `<el-options>` components, along with a native `<input>` and `<button>`, to build an autocomplete input:

```html
<el-autocomplete>
  <input name="user" />
  <button type="button">
    <svg><!-- ... --></svg>
  </button>

  <el-options popover>
    <el-option value="Wade Cooper">Wade Cooper</el-option>
    <el-option value="Tom Cooper">Tom Cooper</el-option>
    <el-option value="Jane doe">Jane Doe</el-option>
  </el-options>
</el-autocomplete>
```

#### Positioning the dropdown

Add the `anchor` prop to the `<el-options>` to automatically position the dropdown relative to the `<input>`:

```html
<el-options popover anchor="bottom start">
  <!-- ... -->
</el-options>
```

Use the values `top`, `right`, `bottom`, or `left` to center the dropdown along the appropriate edge, or combine it with `start` or `end` to align the dropdown to a specific corner, such as `top start` or `bottom end`.

To control the gap between the input and the dropdown, use the `--anchor-gap` CSS variable:

```html
<el-options popover anchor="bottom start" class="[--anchor-gap:4px]">
  <!-- ... -->
</el-options>
```

Additionally, you can use `--anchor-offset` to control the distance that the dropdown should be nudged from its original position.

#### Setting the dropdown width

The `<el-options>` has no width set by default, but you can add one using CSS:

```html
<el-options popover class="w-52">
  <!-- ... -->
</el-options>
```

If you'd like the dropdown width to match the `<input>` width, use the `--input-width` CSS variable that's exposed on the `<el-options>` element:

```html
<el-options popover class="w-(--input-width)">
  <!-- ... -->
</el-options>
```

#### Adding transitions

To animate the opening and closing of the dropdown, target the `data-closed`, `data-enter`, `data-leave`, and `data-transition` attributes with CSS to style the different stages of the transition:

```html
<el-options
  popover
  class="transition transition-discrete data-closed:opacity-0 data-enter:duration-75 data-enter:ease-out data-leave:duration-100 data-leave:ease-in"
>
  <!-- ... -->
</el-options>
```

#### Disabling the input

To disable the input, add the `disabled` attribute to the `<input>`:

```html
<el-autocomplete>
  <input name="user" disabled />

  <!-- ... -->
</el-autocomplete>
```

## Command palette

The `<el-command-palette>` component provides a fast, keyboard-friendly way for users to search and select from a predefined list of options. It's typically displayed inside a dialog — often triggered with a `Cmd+K` shortcut — making it ideal for building power-user features like global searches.

### Component API

#### `<el-command-palette>`

The main command component that manages filtering and coordinates with its child components

| Type       | Name                  | Description                                                                                                                                                                  |
| ---------- | --------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| Attributes | name                  | The form field name for the command when used in forms.                                                                                                                      |
| Attributes | value                 | The selected value of the command. Can be read and set programmatically.                                                                                                     |
| Events     | change                | Dispatched when the active item changes. Detail contains `relatedTarget` property with the active item or `null`.                                                            |
| Methods    | setFilterCallback(cb) | Allows you to customize the filtering behavior of the command. The callback receives an object with `query`, `node` and `content` properties, and should return a `boolean`. |
| Methods    | reset()               | Resets the command to its initial state.                                                                                                                                     |

#### `<el-command-list>`

Contains all the command items and groups. All focusable children will be considered options.

#### `<el-defaults>`

Optional container for suggestion items that are shown when the input is empty.

#### `<el-command-group>`

Groups related command items together.

#### `<el-no-results>`

Optional element shown when no items match the current query.

#### `<el-command-preview>`

Optional preview content shown when a specific item is active.

| Type       | Name | Description                                                   |
| ---------- | ---- | ------------------------------------------------------------- |
| Attributes | for  | The `id` of the item this preview content is associated with. |

### Examples

#### Basic example

Use the `<el-command-palette>`, `<el-command-list>`, `<el-no-results>` components, along with a native `<input>`, to build a command palette:

```html
<el-dialog>
  <dialog>
    <el-command-palette>
      <input autofocus placeholder="Search…" />

      <el-command-list>
        <button hidden type="button">Option #1</button>
        <button hidden type="button">Option #2</button>
        <button hidden type="button">Option #3</button>
      </el-command-list>

      <el-no-results hidden>No results found.</el-no-results>
    </el-command-palette>
  </dialog>
</el-dialog>
```

## Dialog

The `<el-dialog>` component is a lightweight wrapper around the native `<dialog>` element that adds scroll locking, click-outside-to-close support, and smooth exit transitions that work consistently across all browsers. It builds on standard HTML APIs while making dialogs easier to use and style.

### Component API

#### `<el-dialog>`

Wrapper around the native `<dialog>` element used to manage the open state and transitions.

| Type                        | Name            | Description                                                                                                                                              |
| --------------------------- | --------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------- |
| Attributes                  | open            | A boolean attribute that indicates whether the dialog is open or closed. You can change the attribute to dynamically open or close the dialog.           |
| Data attributes (Read-only) | data-closed     | Present before transitioning in, and when transitioning out.                                                                                             |
| Data attributes (Read-only) | data-enter      | Present when transitioning in.                                                                                                                           |
| Data attributes (Read-only) | data-leave      | Present when transitioning out.                                                                                                                          |
| Data attributes (Read-only) | data-transition | Present when transitioning in or out.                                                                                                                    |
| Events                      | open            | Dispatched when the dialog is opened in any way other than by updating the `open` attribute.                                                             |
| Events                      | close           | Dispatched when the dialog is closed in any way other than by updating the `open` attribute.                                                             |
| Events                      | cancel          | Dispatched when the user attempts to dismiss the dialog via Escape key or clicking outside. Calling `preventDefault()` prevents the dialog from closing. |
| Methods                     | show()          | Shows the dialog in modal mode.                                                                                                                          |
| Methods                     | hide()          | Hides the dialog. Takes an optional object with a `restoreFocus` property to disable the default focus restoration.                                      |

#### `<dialog>`

The native dialog element.

| Type     | Name       | Description        |
| -------- | ---------- | ------------------ |
| Commands | show-modal | Opens the dialog.  |
| Commands | close      | Closes the dialog. |

#### `<el-dialog-backdrop>`

The visual backdrop behind your dialog panel.

| Type                        | Name            | Description                                                  |
| --------------------------- | --------------- | ------------------------------------------------------------ |
| Data attributes (Read-only) | data-closed     | Present before transitioning in, and when transitioning out. |
| Data attributes (Read-only) | data-enter      | Present when transitioning in.                               |
| Data attributes (Read-only) | data-leave      | Present when transitioning out.                              |
| Data attributes (Read-only) | data-transition | Present when transitioning in or out.                        |

#### `<el-dialog-panel>`

The main content area of your dialog. Clicking outside of this will trigger the dialog to close.

| Type                        | Name            | Description                                                  |
| --------------------------- | --------------- | ------------------------------------------------------------ |
| Data attributes (Read-only) | data-closed     | Present before transitioning in, and when transitioning out. |
| Data attributes (Read-only) | data-enter      | Present when transitioning in.                               |
| Data attributes (Read-only) | data-leave      | Present when transitioning out.                              |
| Data attributes (Read-only) | data-transition | Present when transitioning in or out.                        |

### Examples

#### Basic example

Use the `<el-dialog>` and `<el-dialog-panel>` components, along with a native `<dialog>`, to build a dialog:

```html
<button command="show-modal" commandfor="delete-profile" type="button">Delete profile</button>

<el-dialog>
  <dialog id="delete-profile">
    <el-dialog-panel>
      <form method="dialog">
        <h3>Delete profile</h3>
        <p>Are you sure? This action is permanent and cannot be undone.</p>
        <div class="flex gap-4">
          <button command="close" commandfor="delete-profile" type="button">Cancel</button>
          <button type="submit">Delete</button>
        </div>
      </form>
    </el-dialog-panel>
  </dialog>
</el-dialog>
```

#### Opening the dialog

You can open dialogs using the `show-modal` [invoker command](https://developer.mozilla.org/en-US/docs/Web/API/Invoker_Commands_API):

```html
<button command="show-modal" commandfor="delete-profile" type="button">Open dialog</button>

<el-dialog>
  <dialog id="delete-profile"><!-- ... --></dialog>
</el-dialog>
```

Alternatively you can add the `open` attribute to the `<el-dialog>` to open it:

```diff
- <el-dialog>
+ <el-dialog open>
    <dialog><!-- ... --></dialog>
  </el-dialog>
```

You can also programmatically open the dialog using the `show()` method on `<el-dialog>`:

```html
<el-dialog id="delete-profile">
  <dialog><!-- ... --></dialog>
</el-dialog>

<script type="module">
  const dialog = document.getElementById('delete-profile')
  dialog.show()
</script>
```

#### Closing the dialog

You can close dialogs using the `close` [invoker command](https://developer.mozilla.org/en-US/docs/Web/API/Invoker_Commands_API):

```html
<button command="close" commandfor="delete-profile" type="button">Close dialog</button>

<el-dialog>
  <dialog id="delete-profile"><!-- ... --></dialog>
</el-dialog>
```

Alternatively you can remove the `open` attribute from the `<el-dialog>` to close it:

```diff
- <el-dialog open>
+ <el-dialog>
    <dialog><!-- ... --></dialog>
  </el-dialog>
```

You can also programmatically close the dialog using the `hide()` method on `<el-dialog>`:

```html
<el-dialog id="delete-profile">
  <dialog><!-- ... --></dialog>
</el-dialog>

<script type="module">
  const dialog = document.getElementById('delete-profile')
  dialog.hide()
</script>
```

#### Adding a backdrop

Use the `<el-dialog-backdrop>` component to add a backdrop behind your dialog panel:

```html
<el-dialog>
  <dialog class="backdrop:bg-transparent">
    <el-dialog-backdrop class="pointer-events-none bg-black/50" />
    <el-dialog-panel><!-- ... --></el-dialog-panel>
  </dialog>
</el-dialog>
```

The primary benefit of using the `<el-dialog-backdrop>` component over the native `::backdrop` pseudo-element is that it can be transitioned reliably using CSS.

#### Adding transitions

To animate the opening and closing of the dialog, target the `data-closed`, `data-enter`, `data-leave`, and `data-transition` attributes with CSS to style the different stages of the transition:

```html
<el-dialog>
  <dialog class="backdrop:bg-transparent">
    <el-dialog-backdrop
      class="pointer-events-none bg-black/50 transition duration-200 data-closed:opacity-0"
    />
    <el-dialog-panel
      class="bg-white transition duration-200 data-closed:scale-95 data-closed:opacity-0"
    >
      <!-- ... -->
    </el-dialog-panel>
  </dialog>
</el-dialog>
```

## Disclosure

The `<el-disclosure>` component provides a simple, accessible way to show and hide content — ideal for building things like toggleable accordion panels or expandable sections.

### Component API

#### `<el-disclosure>`

Contains the content of the disclosure.

| Type                        | Name            | Description                                                  |
| --------------------------- | --------------- | ------------------------------------------------------------ |
| Attributes                  | hidden          | Whether the disclosure is initially hidden (closed).         |
| Attributes                  | open            | Automatically synced with the `hidden` attribute.            |
| Data attributes (Read-only) | data-closed     | Present before transitioning in, and when transitioning out. |
| Data attributes (Read-only) | data-enter      | Present when transitioning in.                               |
| Data attributes (Read-only) | data-leave      | Present when transitioning out.                              |
| Data attributes (Read-only) | data-transition | Present when transitioning in or out.                        |
| Methods                     | show()          | Shows the disclosure.                                        |
| Methods                     | hide()          | Hides the disclosure.                                        |
| Methods                     | toggle()        | Toggles the disclosure.                                      |
| Commands                    | --show          | Shows the disclosure.                                        |
| Commands                    | --hide          | Hides the disclosure.                                        |
| Commands                    | --toggle        | Toggles the disclosure.                                      |

### Examples

#### Basic example

Use the `<el-disclosure>` component, along with a native `<button>`, to build a disclosure:

```html
<button command="--toggle" commandfor="my-disclosure" type="button">
  What's the best thing about Switzerland?
</button>

<el-disclosure hidden id="my-disclosure"> I don't know, but the flag is a big plus. </el-disclosure>
```

#### Opening a disclosure

You can open disclosures using the `--show` [invoker command](https://developer.mozilla.org/en-US/docs/Web/API/Invoker_Commands_API):

```html
<button command="--show" commandfor="my-disclosure" type="button">Show disclosure</button>

<el-disclosure hidden id="my-disclosure">
  <!-- ... -->
</el-disclosure>
```

Alternatively you can remove the `hidden` attribute to open it:

```diff
- <el-disclosure hidden>
+ <el-disclosure>
    <!-- ... -->
  </el-disclosure>
```

You can also programmatically open disclosures using the `show()` method:

```html
<el-disclosure hidden id="my-disclosure">
  <!-- ... -->
</el-disclosure>

<script type="module">
  const disclosure = document.getElementById('my-disclosure')
  disclosure.show()
</script>
```

#### Closing a disclosure

You can close disclosures using the `--hide` [invoker command](https://developer.mozilla.org/en-US/docs/Web/API/Invoker_Commands_API):

```html
<button command="--hide" commandfor="my-disclosure" type="button">Hide disclosure</button>

<el-disclosure id="my-disclosure">
  <!-- ... -->
</el-disclosure>
```

Alternatively you can add the `hidden` attribute to close it:

```diff
- <el-disclosure>
+ <el-disclosure hidden>
    <!-- ... -->
  </el-disclosure>
```

You can also programmatically close disclosures using the `hide()` method:

```html
<el-disclosure id="my-disclosure">
  <!-- ... -->
</el-disclosure>

<script type="module">
  const disclosure = document.getElementById('my-disclosure')
  disclosure.hide()
</script>
```

#### Toggling a disclosure

You can toggle disclosures using the `--toggle` [invoker command](https://developer.mozilla.org/en-US/docs/Web/API/Invoker_Commands_API):

```html
<button command="--toggle" commandfor="my-disclosure" type="button">Toggle disclosure</button>

<el-disclosure hidden id="my-disclosure">
  <!-- ... -->
</el-disclosure>
```

You can also programmatically toggle disclosures using the `toggle()` method:

```html
<el-disclosure hidden id="my-disclosure">
  <!-- ... -->
</el-disclosure>

<script type="module">
  const disclosure = document.getElementById('my-disclosure')
  disclosure.toggle()
</script>
```

#### Adding transitions

To animate the opening and closing of the disclosure, target the `data-closed`, `data-enter`, `data-leave`, and `data-transition` attributes with CSS to style the different stages of the transition:

```html
<el-disclosure hidden class="transition transition-discrete duration-1000 data-closed:opacity-0">
  <!-- ... -->
</el-disclosure>
```

## Dropdown menu

The `<el-dropdown>` component makes it easy to build dropdown menus with full keyboard support and built-in anchoring to control where the dropdown appears relative to its trigger.

### Component API

#### `<el-dropdown>`

Connects the button with the menu.

| Type          | Name          | Description                                          |
| ------------- | ------------- | ---------------------------------------------------- |
| CSS variables | --input-width | Provides the width of the input element (read-only). |

#### `<el-menu>`

Contains all the menu items. All focusable children will be considered options.

| Type                        | Name            | Description                                                                                            |
| --------------------------- | --------------- | ------------------------------------------------------------------------------------------------------ |
| Attributes                  | popover         | Required to enable the popover behavior.                                                               |
| Attributes                  | open            | Controls the open/closed state of the menu.                                                            |
| Attributes                  | anchor          | Where to position the dropdown menu. Supports values like "bottom", "bottom-start", "bottom-end", etc. |
| Attributes                  | anchor-strategy | Sets the `position` CSS property of the popover to either `absolute` (default) or `fixed`.             |
| CSS variables               | --anchor-gap    | Sets the gap between the anchor and the popover.                                                       |
| CSS variables               | --anchor-offset | Sets the distance that the popover should be nudged from its original position.                        |
| Data attributes (Read-only) | data-closed     | Present before transitioning in, and when transitioning out.                                           |
| Data attributes (Read-only) | data-enter      | Present when transitioning in.                                                                         |
| Data attributes (Read-only) | data-leave      | Present when transitioning out.                                                                        |
| Data attributes (Read-only) | data-transition | Present when transitioning in or out.                                                                  |
| Methods                     | togglePopover() | Toggles the menu visibility.                                                                           |
| Methods                     | showPopover()   | Shows the menu.                                                                                        |
| Methods                     | hidePopover()   | Hides the menu.                                                                                        |

### Examples

#### Basic example

Use the `<el-dropdown>` and `<el-menu>` components, along with a native `<button>`, to build a dropdown menu:

```html
<el-dropdown>
  <button type="button">Options</button>
  <el-menu anchor="bottom start" popover>
    <button class="focus:bg-gray-100" type="button">Edit</button>
    <button class="focus:bg-gray-100" type="button">Duplicate</button>
    <hr role="none" />
    <button class="focus:bg-gray-100" type="button">Archive</button>
    <button class="focus:bg-gray-100" type="button">Delete</button>
  </el-menu>
</el-dropdown>
```

All focusable children within the `<el-menu>` component will be considered options.

## Popover

The `<el-popover>` component is used to display floating panels with arbitrary content — perfect for things like navigation menus and flyouts.

### Component API

#### `<el-popover>`

Contains the content of the popover.

| Type                        | Name            | Description                                                                                      |
| --------------------------- | --------------- | ------------------------------------------------------------------------------------------------ |
| Attributes                  | anchor          | Where to position the popover. Supports values like "bottom", "bottom-start", "bottom-end", etc. |
| Attributes                  | anchor-strategy | Sets the `position` CSS property of the popover to either `absolute` (default) or `fixed`.       |
| Data attributes (Read-only) | data-closed     | Present before transitioning in, and when transitioning out.                                     |
| Data attributes (Read-only) | data-enter      | Present when transitioning in.                                                                   |
| Data attributes (Read-only) | data-leave      | Present when transitioning out.                                                                  |
| Data attributes (Read-only) | data-transition | Present when transitioning in or out.                                                            |
| Events                      | toggle          | Dispatched when the popover opens or closes.                                                     |
| Methods                     | togglePopover() | Toggles the popover visibility.                                                                  |
| Methods                     | showPopover()   | Shows the popover.                                                                               |
| Methods                     | hidePopover()   | Hides the popover.                                                                               |

#### `<el-popover-group>`

Links related popovers to prevent them from closing when focus is moved between them.

### Examples

#### Basic example

Use the `<el-popover-group>` component, along with a native `<button>`, to build a popover:

```html
<button popovertarget="content-a" type="button">Menu A</button>

<el-popover id="content-a" anchor="bottom start" popover> Content A </el-popover>
```

#### Grouping popovers

Use the `<el-popover-group>` component to group popovers together. This prevents them from closing when focus is moved between them:

```html
<el-popover-group>
  <button popovertarget="content-a" type="button">Menu A</button>
  <el-popover id="content-a" anchor="bottom start" popover> Content A </el-popover>

  <button popovertarget="content-b" type="button">Menu B</button>
  <el-popover id="content-b" anchor="bottom start" popover> Content B </el-popover>
</el-popover-group>
```

## Select

The `<el-select>` component is a fully accessible replacement for a native `<select>` element, designed to give you complete control over styling.

### Component API

#### `<el-select>`

Manages form integration and coordinates with its child components.

| Type                      | Name          | Description                                                             |
| ------------------------- | ------------- | ----------------------------------------------------------------------- |
| Attributes                | name          | The form field name for the select when used in forms.                  |
| Attributes                | value         | The selected value of the select. Can be read and set programmatically. |
| Events                    | input         | Dispatched when the selected option changes.                            |
| Events                    | change        | Dispatched when the selected option changes.                            |
| CSS variables (Read-only) | --input-width | Provides the width of the input element (read-only).                    |

#### `<el-options>`

The options container that handles the popover behavior.

| Type                        | Name            | Description                                                                                |
| --------------------------- | --------------- | ------------------------------------------------------------------------------------------ |
| Attributes                  | popover         | Required to enable the popover behavior.                                                   |
| Attributes                  | anchor          | Configures the way the options are anchored to the button.                                 |
| Attributes                  | anchor-strategy | Sets the `position` CSS property of the popover to either `absolute` (default) or `fixed`. |
| CSS variables               | --anchor-gap    | Sets the gap between the anchor and the popover.                                           |
| CSS variables               | --anchor-offset | Sets the distance that the popover should be nudged from its original position.            |
| Data attributes (Read-only) | data-closed     | Present before transitioning in, and when transitioning out.                               |
| Data attributes (Read-only) | data-enter      | Present when transitioning in.                                                             |
| Data attributes (Read-only) | data-leave      | Present when transitioning out.                                                            |
| Data attributes (Read-only) | data-transition | Present when transitioning in or out.                                                      |
| Methods                     | togglePopover() | Toggles the options visibility.                                                            |
| Methods                     | showPopover()   | Shows the options.                                                                         |
| Methods                     | hidePopover()   | Hides the options.                                                                         |

#### `<el-option>`

Individual selectable option within the select.

| Type                        | Name          | Description                                       |
| --------------------------- | ------------- | ------------------------------------------------- |
| Attributes                  | value         | The value of the option (required for selection). |
| Attributes                  | disabled      | Whether the option is disabled.                   |
| ARIA attributes (Read-only) | aria-selected | Present when the option is selected.              |

#### `<el-selectedcontent>`

Automatically displays the content of the currently selected option.

### Examples

#### Basic example

Use the `<el-select>`, `<el-options>` and `<el-selectedcontent>` components, along with a native `<button>`, to build a select input:

```html
<el-select name="status" value="active">
  <button type="button">
    <el-selectedcontent>Active</el-selectedcontent>
  </button>
  <el-options popover>
    <el-option value="active">Active</el-option>
    <el-option value="inactive">Inactive</el-option>
    <el-option value="archived">Archived</el-option>
  </el-options>
</el-select>
```

#### Positioning the dropdown

Add the `anchor` prop to the `<el-options>` to automatically position the dropdown relative to the `<input>`:

```html
<el-options popover anchor="bottom start">
  <!-- ... -->
</el-options>
```

Use the values `top`, `right`, `bottom`, or `left` to center the dropdown along the appropriate edge, or combine it with `start` or `end` to align the dropdown to a specific corner, such as `top start` or `bottom end`.

To control the gap between the input and the dropdown, use the `--anchor-gap` CSS variable:

```html
<el-options popover anchor="bottom start" class="[--anchor-gap:4px]">
  <!-- ... -->
</el-options>
```

Additionally, you can use `--anchor-offset` to control the distance that the dropdown should be nudged from its original position.

#### Setting the dropdown width

The `<el-options>` has no width set by default, but you can add one using CSS:

```html
<el-options popover class="w-52">
  <!-- ... -->
</el-options>
```

If you'd like the dropdown width to match the `<button>` width, use the `--button-width` CSS variable that's exposed on the `<el-options>` element:

```html
<el-options popover class="w-(--button-width)">
  <!-- ... -->
</el-options>
```

#### Adding transitions

To animate the opening and closing of the dropdown, target the `data-closed`, `data-enter`, `data-leave`, and `data-transition` attributes with CSS to style the different stages of the transition:

```html
<el-options
  popover
  class="transition transition-discrete data-closed:opacity-0 data-enter:duration-75 data-enter:ease-out data-leave:duration-100 data-leave:ease-in"
>
  <!-- ... -->
</el-options>
```

#### Disabling the input

To disable the input, add the `disabled` attribute to the `<button>`:

```html
<el-select name="status" value="active">
  <button type="button" disabled>
    <el-selectedcontent>Active</el-selectedcontent>
  </button>

  <!-- ... -->
</el-select>
```

## Tabs

The `<el-tab-group>` component makes it easy to build accessible, keyboard-navigable tab interfaces with full control over styling and layout.

### Component API

#### `<el-tab-group>`

The main container that coordinates the tabs and panels.

| Type    | Name                | Description                   |
| ------- | ------------------- | ----------------------------- |
| Methods | setActiveTab(index) | Sets the active tab by index. |

#### `<el-tab-list>`

The container for tab buttons.

#### `<el-tab-panels>`

The container for tab panels. All direct children are considered panels.

### Examples

#### Basic example

Use the `<el-tab-group>`, `<el-tab-list>`, and `<el-tab-panels>` components, along with native `<button>` elements, to build a tab group:

```html
<el-tab-group>
  <el-tab-list>
    <button type="button">Tab 1</button>
    <button type="button">Tab 2</button>
    <button type="button">Tab 3</button>
  </el-tab-list>
  <el-tab-panels>
    <div>Content 1</div>
    <div hidden>Content 2</div>
    <div hidden>Content 3</div>
  </el-tab-panels>
</el-tab-group>
```

#### Setting the active tab

The initially active tab is determined by the absence of the `hidden` attribute on panels. This allows the component to work correctly with server-side rendering.

```html
<el-tab-panels>
  <div>Active panel</div>
  <div hidden>Inactive panel</div>
  <div hidden>Inactive panel</div>
</el-tab-panels>
```
#+end_src
